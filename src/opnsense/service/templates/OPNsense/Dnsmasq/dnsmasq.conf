# DO NOT EDIT THIS FILE -- OPNsense auto-generated file
#

{% if helpers.exists('system.webgui.nodnsrebindcheck') %}
rebind-localhost-ok
stop-dns-rebind
{% endif %}

{% if dnsmasq.port %}
port={{ dnsmasq.port }}
{% endif %}

{% if dnsmasq.interface %}
# If you want dnsmasq to listen for DHCP and DNS requests only on
# specified interfaces (and the loopback) give the name of the
# interface (eg eth0) here.
# Repeat the line for more than one interface.
interface={{helpers.physical_interfaces(dnsmasq.interface.split(','))|join(',')}}
{% endif %}

{% if dnsmasq.no_dhcp_interface %}
# If you want dnsmasq to provide only DNS service on an interface,
# configure it as shown above, and then use the following line to
# disable DHCP and TFTP on it.
no-dhcp-interface={{helpers.physical_interfaces(dnsmasq.no_dhcp_interface.split(','))|join(',')}}
{% endif %}

{% if dnsmasq.strictbind == '1' %}
# On systems which support it, dnsmasq binds the wildcard address,
# even when it is listening on only some interfaces. It then discards
# requests that it shouldn't reply to. This has the advantage of
# working even when interfaces come and go and change address. If you
# want dnsmasq to really bind only the interfaces it is listening on,
# uncomment this option. About the only time you may need this is when
# running another nameserver on the same machine.
bind-interfaces
{% endif %}


{% if dnsmasq.no_private_reverse == '1' %}
# Never forward addresses in the non-routed address spaces.
bogus-priv
{% endif %}

{% for override in helpers.toList('dnsmasq.domainoverrides') %}
server=/{{override.domain}}/{{override.ip}}{%if override.port %}#{{override.port}}{% endif %}{%if override.srcip %}@{{override.srcip}}{% endif %}
{%    if helpers.exists('system.webgui.nodnsrebindcheck') %}
rebind-domain-ok=/{{override.domain}}/
{%    endif %}
{% endfor %}

{% if dnsmasq.strict_order == '1' %}
# By  default,  dnsmasq  will  send queries to any of the upstream
# servers it knows about and tries to favour servers to are  known
# to  be  up.  Uncommenting this forces dnsmasq to try each query
# with  each  server  strictly  in  the  order  they   appear   in
# /etc/resolv.conf
strict-order
{% endif %}

{% if dnsmasq.domain_needed  == '1' %}
# Never forward plain names (without a dot or domain part)
domain-needed
{% endif %}


{% if dnsmasq.dnssec  == '1' %}
# Uncomment these to enable DNSSEC validation and caching:
# (Requires dnsmasq to be built with DNSSEC option.)
conf-file=/usr/local/share/dnsmasq/trust-anchors.conf
dnssec
{% endif %}

{% if dnsmasq.log_queries  == '1' %}
# For debugging purposes, log each DNS query as it passes through
# dnsmasq.
log-queries=extra
{% endif %}

{% if dnsmasq.no_hosts  == '1' %}
# If you don't want dnsmasq to read /etc/hosts, uncomment the
# following line.
no-hosts
{% endif %}

# host entries flushed via dnsmasq_watcher.py [isc] and a dump of the static reservations
addn-hosts=/var/etc/dnsmasq-hosts
addn-hosts=/var/etc/dnsmasq-leases

dns-forward-max={{dnsmasq.dns_forward_max|default('5000')}}
cache-size={{dnsmasq.cache_size|default('10000')}}
local-ttl={{dnsmasq.local_ttl|default('1')}}

conf-dir=/usr/local/etc/dnsmasq.conf.d,\*.conf


{% for dhcp_range in helpers.toList('dnsmasq.dhcp_ranges') %}

dhcp-range={%
    if dhcp_range.interface
%}{{helpers.physical_interface(dhcp_range.interface)}},{% endif %}{%
    if dhcp_range.set_tag
%}set:{{dhcp_range.set_tag|replace('-','')}},{%
    endif
%}{{dhcp_range.start_addr}},{%
    if dhcp_range.static == '1'
%}static,{%
    elif dhcp_range.end_addr
%}{{ dhcp_range.end_addr }},{%
    endif
%}{{dhcp_range.lease_time|default('86400')}}
{% if dhcp_range.domain %}
domain={{ dhcp_range.domain }},{{dhcp_range.start_addr}},{{dhcp_range.end_addr}}
{% endif %}
{% endfor %}

{% for host in helpers.toList('dnsmasq.hosts') %}
{%    if host.hwaddr and host.hwaddr.find(':') == -1%}
dhcp-host={{host.hwaddr}}{% if host.set_tag%},set:{{host.set_tag|replace('-','')}}{% endif %},{{host.ip}}
{%    endif %}
{% endfor %}

{% for option in helpers.toList('dnsmasq.dhcp_options') %}
dhcp-option{% if option.force == '1' %}-force{% endif %}={% if option.tag %}tag:{{option.tag.replace('-','').split(',')|join(',tag:')}},{% endif %}{{ option.option }},{{ option.value }}
{% endfor %}

{% for match in helpers.toList('dnsmasq.dhcp_options_match') %}
dhcp-match=set:{{match.set_tag.replace('-','')}},{{match.option}}{%if match.value %},{{match.value}}{% endif +%}
{% endfor %}

{% if dnsmasq.no_ident  == '1' %}
no-ident
{% endif %}
