#!/usr/local/bin/php
<?php

/*
 * Copyright (C) 2021 Deciso B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
 * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

require_once("config.inc");
require_once("interfaces.inc");
require_once("util.inc");

$subsystem = !empty($argv[1]) ? $argv[1] : '';
$type = !empty($argv[2]) ? $argv[2] : '';

$a_hasync = &config_read_array('hasync');
if (!empty($a_hasync['disconnectppps'])) {
    if ($type != 'MASTER' && $type != 'BACKUP' && $type != 'INIT') {
       log_msg("Carp '$type' event unknown from source '{$subsystem}'");
       exit(1);
    } elseif (!strstr($subsystem, '@')) {
       log_msg("Carp '$type' event triggered from wrong source '{$subsystem}'");
       exit(1);
    }

    list ($vhid, $iface) = explode('@', $subsystem);
    $a_ppps = &config_read_array('ppps', 'ppp');
    foreach ($a_ppps as $ppp) {
        if ($ppp['ports'] == $iface) {
            foreach($config['interfaces'] as $ifkey => $interface) {
                if ($ppp['if'] == $interface['if']) {
                    log_msg("{$iface} is connected to ppp interface {$ifkey} set new status {$type}");
                    if ($type == 'BACKUP' || $type == 'INIT') {
                        interface_suspend($ifkey);
                    } else {
                        interface_ppps_configure($ifkey);
                    }
                }
            }
        }
    }
}
